@model SisAdot.Models.Animal.AnimalViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<!--<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
            <h4 class="modal-title">Detalhes do produto</h4>
        </div>
        <div class="modal-body">

        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Fechar</button>
        </div>
    </div>-->
<!-- /.modal-content -->
<!--</div>--><!-- /.modal-dialog -->

<h2>Edit</h2>


@using (Html.BeginForm("Edit", "Animal",
    FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Animal</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.AnimalID)
    @Html.HiddenFor(model => model.UsuarioID)

    <div class="form-group">
        @Html.LabelFor(model => model.TamanhoAnimal, "Porte", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.TamanhoAnimal, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.TamanhoAnimal, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RacaAnimal, "Raça", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.RacaAnimal, htmlAttributes: new { @class = "form-control" }) 
            @Html.ValidationMessageFor(model => model.RacaAnimal, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Idade, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Idade, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Idade, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.StatusVacina, "Vacinas em dia", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.CheckBoxFor(m => m.StatusVacina, new { @class = "custom-control-input" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Situacao, "Situação", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.Situacao, htmlAttributes: new { @class = "form-control" }) 
            @Html.ValidationMessageFor(model => model.Situacao, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Resenha, "Descrição", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Resenha, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Resenha, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Imagem, "Foto", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Imagem, new { type = "file", @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Imagem, "", new { @class = "text-danger" })
        </div>
    </div>

    @if (Model.ByteFoto != null)
    {
        <div class="form-group">

            <button type="button" class="collapsible">Mostrar Foto</button>
            <div class="content">
                @{
                    var base64 = Convert.ToBase64String(Model.ByteFoto);
                    var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                }
                <img src="@imgSrc" />
            </div>
        </div>
    }

    <div class="form-group">
        <div class="col-md-offset-2 col-md-2">
            <input type="submit" value="Salvar" class="btn btn-primary" onclick="return confirm('Deseja atualizar o registro ?');" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <style>
        .collapsible {
            background-color: #eee;
            color: #444;
            cursor: pointer;
            padding: 18px;
            width: 100%;
            border: none;
            text-align: left;
            outline: none;
            font-size: 15px;
        }

        .content {
            padding: 0 18px;
            background-color: white;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.2s ease-out;
        }
    </style>

    <script>
        var coll = document.getElementsByClassName("collapsible");
        var i;

        for (i = 0; i < coll.length; i++) {
            coll[i].addEventListener("click", function () {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.maxHeight) {
                    content.style.maxHeight = null;
                } else {
                    content.style.maxHeight = content.scrollHeight + "px";
                }
            });
        }
    </script>
}
